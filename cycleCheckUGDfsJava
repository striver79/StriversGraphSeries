import java.util.ArrayList;

public class DFS_Cycle {

    static void addEdge(ArrayList<ArrayList<Integer>> adjacent, int from, int to){
        adjacent.get(from).add(to);
        adjacent.get(to).add(from);
    }

    static void isCycle(ArrayList<ArrayList<Integer>> adjacent){
        int component = 0;
        boolean visited[] = new boolean[adjacent.size()];
        ArrayList<Integer> DFS_List = new ArrayList<Integer>();
        for(int i=0; i<adjacent.size(); i++){
            if(visited[i]==false){
                System.out.println("Component "+(++component)+" has Cycle: "+DFS_Cycle(i,adjacent,visited,DFS_List));
            }
        }
        System.out.println(DFS_List);
    }

    static boolean DFS_Cycle(int node, ArrayList<ArrayList<Integer>> adjacent, boolean visited[], ArrayList<Integer> DFS_List){
        DFS_List.add(node);
        visited[node] = true;
        for(Integer it : adjacent.get(node)){
            if(visited[it] == false){
                if(DFS_Cycle(it,adjacent,visited, DFS_List)==false){
                    return false;
                }
            }
            else if(node == it){
                return false;
            }
        }
        return true;
    }

    public static void main(String args[]){
        int vertex = 15;
        ArrayList<ArrayList<Integer>> adjacent = new ArrayList<ArrayList<Integer>>();
        for(int i=0; i<vertex; i++){
            adjacent.add(new ArrayList<Integer>());
        }

        addEdge(adjacent,0,1);
        addEdge(adjacent,0,2);
        addEdge(adjacent,2,3);
        addEdge(adjacent,2,4);
        addEdge(adjacent,2,5);
        addEdge(adjacent,5,6);
        addEdge(adjacent,7,8);
        addEdge(adjacent,8,11);
        addEdge(adjacent,9,10);
        addEdge(adjacent,10,13);
        addEdge(adjacent,11,12);
        addEdge(adjacent,12,14);
        addEdge(adjacent,13,14);

        isCycle(adjacent);
    }
}
